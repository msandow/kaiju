Util = require('./Utilities.coffee')
Canvas = require('./Canvas.coffee')

module.exports = ->

  gameWindow = document.querySelector('.window')
  
  require('./Globals.coffee')(gameWindow)
  
  window.points = []

  currentViewPort = Util.getViewPortInfo()


  gameWindow.addEventListener("scroll", (evt)->
    currentViewPort = Util.getViewPortInfo()
  )


  window.addEventListener("resize", (evt)->
    currentViewPort = Util.getViewPortInfo()
  )


  gameWindow.addEventListener("click", (evt)->
    coor = Util.getEventCoords(evt, definedLayers[2].el)
    points.push(coor)
    definedLayers[3].clear()
    definedLayers[3].ctx.beginPath()
    definedLayers[3].ctx.lineWidth = 7
    definedLayers[3].drawSmoothLine(points)
    definedLayers[3].ctx.stroke()
    console.log(JSON.stringify(Util.noisify(points)))
  )
  
#  gameWindow.addEventListener("click", (evt)->
#    coor = Util.getEventCoords(evt)
#    i = definedLayers.length - 1
#    while i >= 0
#      console.log(i, definedLayers[i].getPixelAlpha(coor[0], coor[1]))
#      i--
#  )
  
  #window.GameDisplay = newÂ Canvas()
#  BezierDisplay.data.commands = [
#    {command:'add', data:[[209,18],[216,25],[217,24],[221,26],[227,27],[234,29],[242,24],[244,23],[252,24],[255,32],[258,35],[261,33],[272,38],[267,42],[270,49],[271,53],[266,54],[267,61],[266,69],[269,71],[272,81],[274,81],[274,89],[274,94],[272,98],[280,105],[285,108],[288,113],[290,119],[286,123],[286,122],[286,128],[291,130],[291,134],[290,134],[285,132],[288,134],[287,127],[282,129],[279,128],[277,128],[274,125],[276,130],[271,132],[272,135],[270,131],[274,136],[270,138],[274,138],[273,136],[269,136],[271,143],[271,143],[264,143],[266,138],[262,141],[265,141],[267,139],[263,135],[262,136],[263,137],[259,139],[261,137],[259,142],[254,145],[259,145],[258,147],[262,153],[260,155],[263,155],[261,158],[259,159],[258,164],[263,172],[260,173],[262,172],[264,178],[265,181],[260,182],[257,180],[256,184],[258,182],[259,186],[258,195],[261,196],[260,195],[256,198],[262,199],[259,202],[262,200],[262,206],[258,210],[263,208],[262,202],[261,204],[259,202],[251,206],[252,206],[248,209],[253,211],[251,219],[257,220],[256,227],[258,225],[258,229],[257,228],[261,231],[263,232],[271,235],[271,237],[271,240],[276,241],[274,246],[270,243],[267,245],[262,246],[261,250],[262,251],[264,258],[271,263],[270,262],[274,267],[277,272],[279,278],[277,277],[280,279],[290,276],[299,274],[301,280],[302,279],[305,276],[302,280],[308,279],[309,279],[317,288],[319,293],[319,296],[320,296],[324,299],[329,302],[335,309],[337,306],[335,308],[337,303],[343,304],[347,309],[353,308],[363,303],[364,305],[369,308],[372,312],[371,315],[375,318],[376,323],[373,328],[375,331],[380,331],[381,331],[383,330],[388,328],[389,332],[394,334],[391,341],[396,342],[397,344],[395,343],[401,344],[406,349],[413,347],[413,346],[412,351],[410,354],[417,357],[416,356],[412,363],[415,360],[412,365],[412,368],[416,372],[418,374],[424,374],[429,370],[425,374],[428,373],[426,367],[426,373],[431,373],[433,370],[432,372],[435,374],[434,374],[436,373],[430,381],[429,377],[436,381],[442,387],[441,390],[438,390],[442,397],[441,399],[441,400],[443,400],[449,399],[446,396],[451,393],[458,393],[456,390],[457,387],[466,391],[467,393],[473,399],[478,400],[475,398],[473,400],[473,410],[474,418],[480,427],[480,427],[479,434],[483,438],[487,440],[486,439],[492,440],[492,445],[496,442],[500,450],[499,454],[501,459],[505,457],[510,456],[516,457],[525,459],[526,463],[531,462],[531,466],[532,468],[542,467],[542,468],[545,468],[551,469],[549,462],[553,458],[554,458],[559,458],[560,456],[563,454],[566,451],[575,449],[580,452],[587,452],[588,454],[594,451],[592,451],[600,457],[604,454],[612,458],[612,455],[615,502],[615,544],[621,595],[622,638],[515,644],[408,643],[304,644],[199,645],[205,639],[202,627],[204,619],[206,605],[204,594],[207,592],[215,580],[214,574],[215,561],[214,555],[211,547],[212,538],[215,533],[209,524],[209,519],[202,512],[198,504],[193,501],[188,491],[191,481],[189,475],[188,470],[191,466],[186,464],[187,462],[184,463],[186,458],[179,455],[183,444],[184,438],[185,431],[180,424],[185,412],[183,407],[185,407],[179,398],[179,395],[177,384],[170,374],[166,373],[165,369],[161,369],[155,369],[151,367],[153,367],[150,365],[148,367],[144,369],[140,373],[144,375],[139,379],[142,374],[144,370],[141,374],[135,374],[137,374],[138,368],[132,363],[136,361],[131,356],[130,355],[127,347],[128,342],[125,331],[124,328],[128,323],[126,319],[125,312],[125,311],[130,308],[129,307],[130,308],[131,307],[134,300],[133,302],[134,296],[138,296],[136,288],[138,280],[132,274],[131,265],[136,264],[135,266],[132,260],[132,261],[133,255],[133,257],[138,256],[139,262],[140,260],[141,262],[147,256],[151,256],[148,255],[149,251],[148,248],[152,244],[153,246],[151,245],[154,240],[149,234],[150,234],[149,235],[152,233],[150,226],[153,221],[157,220],[160,217],[160,209],[153,204],[154,199],[154,192],[155,189],[151,182],[150,174],[157,165],[154,160],[157,157],[154,147],[157,143],[159,134],[154,120],[153,112],[151,103],[148,92],[153,84],[155,76],[152,63],[152,61],[152,62],[151,54],[150,53],[152,46],[155,43],[152,46],[157,40],[160,36],[164,37],[171,38],[172,42],[174,39],[171,38],[178,43],[179,43],[179,41],[179,36],[179,31],[180,29],[183,21],[180,21],[180,17],[183,19],[188,18],[189,15],[194,16],[191,16],[199,23],[199,22],[205,20],[203,24],[205,17],[205,18],[207,20]]}
#    {command:'subtract', data:[[205,244],[210,246],[206,246],[210,248],[214,256],[221,256],[221,261],[221,268],[221,268],[221,273],[227,275],[226,275],[228,280],[224,285],[228,282],[225,287],[228,283],[226,287],[228,283],[225,277],[223,280],[221,279],[216,278],[220,278],[218,276],[219,274],[217,271],[217,267],[217,271],[217,267],[216,271],[213,270],[213,267],[209,261],[213,263],[210,258],[206,258],[203,257],[206,256],[201,249],[203,245],[198,242],[201,242],[202,243]]}
#    {command:'subtract', data:[[244,316],[243,321],[251,327],[256,326],[256,331],[258,339],[262,339],[259,343],[265,344],[268,351],[269,353],[269,359],[270,359],[273,362],[276,369],[281,370],[281,377],[285,378],[282,376],[282,379],[287,378],[289,378],[293,382],[289,384],[292,389],[296,392],[294,395],[296,395],[299,397],[302,395],[303,400],[301,403],[301,406],[295,405],[295,400],[290,400],[287,398],[281,397],[281,393],[279,390],[282,390],[281,386],[281,388],[280,388],[281,383],[283,381],[280,378],[272,373],[273,375],[273,375],[276,377],[276,371],[274,371],[272,367],[270,366],[269,368],[266,368],[263,366],[263,359],[260,361],[264,357],[265,358],[265,354],[261,355],[262,353],[258,351],[252,344],[252,342],[248,339],[244,342],[248,340],[254,339],[255,343],[253,342],[249,342],[249,339],[250,335],[249,329],[244,331],[247,329],[244,323],[244,323],[241,318],[242,321]]}
#  ]  
#  

  
  #console.log(JSON.stringify(Util.noisify(Util.noisify( [[325,147],[339,150],[351,154],[368,155],[377,162],[390,172],[397,175],[403,183],[411,187],[415,196],[411,202],[403,205],[395,197],[389,189],[375,183],[366,183],[365,180],[354,177],[347,174],[347,168],[345,168],[335,168],[327,162],[324,155],[320,148]] ))))
  
  #BezierDisplay.data.points = Util.translate(BezierDisplay.data.points, -50, -400)
  #BezierDisplay.data.points = Util.noisify(BezierDisplay.data.points)
  #BezierDisplay.data.points = Util.noisify(BezierDisplay.data.points)
  #console.log(Util.bounds(BezierDisplay.data.points))
  
  #gameWindow.appendChild(GameDisplay.el)
  
  definedLayers = []
  
  for layer in [
    require('./maps/BaseWater.coffee')(2850, 2833)
    require('./maps/SFBay.coffee')
    require('./maps/SFBay_Roads.coffee')
  ]
    displayLayer = new Canvas()
    displayLayer.import(layer)
    gameWindow.appendChild(displayLayer.el)
    definedLayers.push(displayLayer)
  
  displayLayer = new Canvas(width:2850,height:2833,top:50,left:50)
  gameWindow.appendChild(displayLayer.el)
  definedLayers.push(displayLayer)
  
#  for c,idx in BezierDisplay.data.commands when ['add','subtract'].indexOf(c.command) > -1
#    console.log(idx)
#    console.log(JSON.stringify(Util.scalePoints(c.data,0,0,1.5,1.5)))
#    
#    console.log('')
#    console.log('---------------------')
#    console.log('')
  
  #console.log(JSON.stringify(BezierDisplay.data.commands))
  
  #BezierDisplay.parseCommands()
  #console.log(BezierDisplay.getPixelAlpha(813,123))
  #console.log(BezierDisplay.export())
